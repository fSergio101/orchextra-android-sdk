/*
 * Created by Orchextra
 *
 * Copyright (C) 2016 Gigigo Mobile Services SL
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'
apply from: rootProject.file('gradle/checkstyle.gradle')
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'net.vrallev.jarjar'

def STRING = "String"
def BOOLEAN = "boolean"
def INT = "int"
def LONG = "long"

def DISABLED_RAGGING = '0'
def MIN_RAGGING_TIME = '10000'
def MAX_RAGGING_TIME = '180000'
def BACKGROUND_BEACONS_SCAN_TIME = '1100'
def BACKGROUND_BEACONS_BEETWEEN_SCAN_TIME = '5000'

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
  }
}

android {

  compileSdkVersion parent.ext.androidCompileSdkVersion
  buildToolsVersion parent.ext.androidBuildToolsVersion

  defaultConfig {
    minSdkVersion parent.ext.androidMinSdkVersion
    targetSdkVersion parent.ext.androidTargetSdkVersion
    versionCode parent.ext.androidVersionCode
    versionName parent.ext.androidVersionName

    buildConfigField INT, "BACKGROUND_BEACONS_RANGING_TIME", MIN_RAGGING_TIME
    buildConfigField LONG, "BACKGROUND_BEACONS_SCAN_TIME", BACKGROUND_BEACONS_SCAN_TIME
    buildConfigField LONG, "BACKGROUND_BEACONS_BEETWEEN_SCAN_TIME", BACKGROUND_BEACONS_BEETWEEN_SCAN_TIME
    buildConfigField STRING, "API_VERSION", '"v1/"'
    buildConfigField INT, "CONCURRENT_INTERACTORS", '3'
    buildConfigField STRING, "X_APP_SDK", '"ANDROID"'
    buildConfigField STRING, "TOKEN_TYPE_BEARER", '"Bearer"'
    buildConfigField STRING, "IBEACON_LAYOUT_PARSING", '"m:2-3=0215,i:4-19,i:20-21,i:22-23,p:24-24,d:25-25"'
    buildConfigField STRING, "API_URL", '"https://sdk.orchextra.io/"'
  }

  buildTypes {
    debug{
      testCoverageEnabled = true
      buildConfigField BOOLEAN, "RETROFIT_LOG", "true"
      buildConfigField STRING, "API_URL", '"https://sdk.orchextra.io/"'
    }
    release {
      buildConfigField BOOLEAN, "RETROFIT_LOG", "false"
      buildConfigField STRING, "API_URL", '"https://sdk.orchextra.io/"'

      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

    lintOptions {
      abortOnError false
    }

}

// create separate scope for jarjar
//configurations {
//  jarjar
//}

jarjar {
  // required, path to the executable .jar file
  jarJarFile 'libs/jarjar-1.4.jar'

  // optional, the rules for the jarjar tool
  rules = [
      'rule dagger.** ox.dagger.@1',
      'rule com.google.common.** ox.core.deps.guava.@1'
  ]

  // optional, exclude files from the dependency .jar files
    srcExcludes = ['META-INF/**']

  // optional, default is build_repackaged.jar, the result .jar file name
  outputName 'daggerOrchextra.jar'

  // optional, default is libs, the directory of the result .jar
  outputDir 'libs'

  // optional, default is false
  ignoreJarJarResult false
}

dependencies {
//  compile fileTree(dir: 'libs/', include: ['*.jar'])
//  apt parent.ext.dependencies.daggerCompiler

//  jarjar files('libs/jarjar-1.4.jar')

  provided files('libs/dagger-2.2.jar')
  provided files('libs/guava-19.0.jar')
//  // TODO: the following 2 dagger deps are required at compile time only
//  // and should be taken from maven repo once dagger 2.1 is released
  provided files('libs/dagger-compiler-2.2.jar')
  provided files('libs/dagger-producers-2.2.jar')

//  jarjar files('libs/jarjar-1.4.jar')

  jarjar files('libs/dagger-2.2.jar')
  jarjar files('libs/guava-19.0.jar')
  // TODO: the following 2 dagger deps are required at compile time only
  // and should be taken from maven repo once dagger 2.1 is released
  jarjar files('libs/dagger-compiler-2.2.jar')
  jarjar files('libs/dagger-producers-2.2.jar')

  provided parent.ext.dependencies.javaXannotations
  compile parent.ext.dependencies.retrofit
  compile parent.ext.dependencies.gsonConverter
  compile parent.ext.dependencies.loggingInterceptor
  compile parent.ext.dependencies.threaddecoratedview
  compile parent.ext.dependencies.androidSupportv7
  compile parent.ext.dependencies.altBeacon
  apt parent.ext.dependencies.threaddecoratedviewcompiler

  compile parent.ext.dependencies.playServicesLocation
  compile parent.ext.dependencies.playServicesGcm

  compile parent.ext.dependencies.barcodescanner
  compile files('libs/daggerOrchextra.jar')

  compile project(':orchextrasdk-control')
  compile project(':orchextrasdk-data')

  compile parent.ext.dependencies.gggLib
  compile parent.ext.dependencies.gggLogger

  testCompile parent.ext.testDependencies.junit
  testCompile parent.ext.testDependencies.mockito

}

//task applyPatch << {
//    project.ant {
//      taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.jarjar.asPath
//      jarjar(jarfile: 'libs/daggerOrchextra.jar', filesetmanifest: "merge") {
//        zipfileset(src: 'libs/dagger-2.2.jar')
//        zipfileset(src: 'libs/guava-19.0.jar')
//        rule pattern: "dagger.**", result: "ox.dagger.@1"
//        rule pattern: "com.google.common.**", result: "ox.core.deps.guava.@1"
//      }
//    }
//}


// build a jar with source files
task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

task javadoc(type: Javadoc) {
  failOnError  false
  source = android.sourceSets.main.java.sourceFiles
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}
